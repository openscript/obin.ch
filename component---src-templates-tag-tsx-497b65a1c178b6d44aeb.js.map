{"version":3,"sources":["webpack:///./src/templates/tag.tsx","webpack:///./src/components/Card.tsx","webpack:///./src/components/ExcerptItem.tsx"],"names":["StyledExcerptItem","ExcerptItem","Tag","data","pageContext","title","useIntl","formatMessage","id","tag","entries","edges","map","entry","i","node","frontmatter","path","fields","key","date","modifiedAt","tags","excerpt","Card","className","children","header","footer","Header","Footer","StyledCardHeader","StyledMetaInformation","StyledTagContainer","StyledCardFooter","StyledHeading","headingType","to","as","value","translation"],"mappings":"kOASA,IAAMA,EAAoB,YAAOC,IAAP,+CAAH,8CAMR,SAASC,EAAT,GAA8C,IAA/BC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,YAE5BC,EADOC,cACMC,cAAc,CAAEC,GAAI,kBAAoB,CAAEC,IAAKL,EAAYK,MAE9E,OACE,YAAC,IAAD,CAAeL,YAAaA,EAAaC,MAAOA,GAC9C,YAAC,IAAD,KACE,sBAAKD,EAAYC,OAChBF,EAAKO,QAAQC,MAAMC,KAAI,SAACC,EAAOC,GAAR,OACtB,YAACd,EAAD,CACEK,MAAOQ,EAAME,KAAKC,YAAYX,MAC9BY,KAAMJ,EAAME,KAAKG,OAAOD,KACxBE,IAAKL,EACLM,KAAMP,EAAME,KAAKG,OAAOG,WACxBC,KAAMT,EAAME,KAAKG,OAAOI,MAEvBT,EAAME,KAAKQ,gB,gJCvBjB,SAASC,EAAT,GAAkE,IAAlDC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAClD,OACE,mBAAKH,UAAWA,GACbE,EACAD,EACAE,GAWPJ,EAAKK,OAJL,YAAsD,IAApCH,EAAoC,EAApCA,SAAUD,EAA0B,EAA1BA,UAC1B,OAAO,mBAAKA,UAAWA,GAAYC,IAWrCF,EAAKM,OAJL,YAAsD,IAApCJ,EAAoC,EAApCA,SAAUD,EAA0B,EAA1BA,UAC1B,OAAO,mBAAKA,UAAWA,GAAYC,ICtBrC,IAAMK,EAAmB,YAAOP,EAAKK,OAAZ,8CAAH,sHAQhBG,EAAwB,mBAAH,iDAAG,CAAH,mGAOrBC,EAAqB,mBAAH,8CAAG,CAAH,kDAMlBC,EAAmB,YAAOV,EAAKM,OAAZ,8CAAH,sEAMhBK,EAAgB,kBAAH,yCAAG,CAAH,mCAYZ,SAASlC,EAAT,GAA6G,IAAtFwB,EAAsF,EAAtFA,UAAWpB,EAA2E,EAA3EA,MAAOe,EAAoE,EAApEA,KAAME,EAA8D,EAA9DA,KAAMI,EAAwD,EAAxDA,SAAUT,EAA8C,EAA9CA,KAA8C,IAAxCmB,mBAAwC,MAA1B,KAA0B,EAC5GT,EACJ,YAACI,EAAD,KACE,YAAC,OAAD,CAAMM,GAAIpB,GACR,YAACkB,EAAD,CAAeG,GAAIF,GAAc/B,IAEnC,YAAC2B,EAAD,KACE,wBACE,YAAC,IAAD,CAAeO,MAAOnB,IADxB,IACiC,YAAC,IAAD,CAAemB,MAAOnB,KAEtDE,GACC,YAACW,EAAD,KACGX,EAAKV,KAAI,SAACH,EAAKK,GAAN,OACR,YAAC,OAAD,CAAMuB,GAAI5B,EAAIQ,KAAME,IAAKL,GACtBL,EAAI+B,mBAQbZ,EACJ,YAACM,EAAD,KACE,YAAC,OAAD,CAAMG,GAAIpB,GACR,YAAC,IAAD,CAAkBT,GAAI,gBAK5B,OACE,YAACgB,EAAD,CAAMG,OAAQA,EAAQC,OAAQA,EAAQH,UAAWA,GAC9CC","file":"component---src-templates-tag-tsx-497b65a1c178b6d44aeb.js","sourcesContent":["import styled from '@emotion/styled';\nimport { graphql } from 'gatsby';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { SitePageContext, TagPageQuery } from '../../graphql-types';\nimport { ExcerptItem } from '../components/ExcerptItem';\nimport { DefaultLayout } from '../layouts/default';\nimport { PaddedElement } from '../layouts/default/PaddedElement';\n\nconst StyledExcerptItem = styled(ExcerptItem)`\n  margin-bottom: 2rem;\n`;\n\ntype TagProps = { data: TagPageQuery; pageContext: SitePageContext };\n\nexport default function Tag({ data, pageContext }: TagProps) {\n  const intl = useIntl();\n  const title = intl.formatMessage({ id: 'page.tag.title' }, { tag: pageContext.tag });\n\n  return (\n    <DefaultLayout pageContext={pageContext} title={title}>\n      <PaddedElement>\n        <h2>{pageContext.title}</h2>\n        {data.entries.edges.map((entry, i) => (\n          <StyledExcerptItem\n            title={entry.node.frontmatter.title}\n            path={entry.node.fields.path}\n            key={i}\n            date={entry.node.fields.modifiedAt}\n            tags={entry.node.fields.tags}\n          >\n            {entry.node.excerpt}\n          </StyledExcerptItem>\n        ))}\n      </PaddedElement>\n    </DefaultLayout>\n  );\n}\n\nexport const query = graphql`\n  query TagPage($language: String!, $tag: String!) {\n    entries: allMarkdownRemark(\n      sort: { fields: fields___modifiedAt, order: DESC }\n      filter: { fields: { language: { eq: $language }, tags: { elemMatch: { value: { eq: $tag } } } } }\n    ) {\n      edges {\n        node {\n          fields {\n            path\n            modifiedAt\n            tags {\n              translation\n              path\n            }\n          }\n          frontmatter {\n            title\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`;\n","import React, { ReactNode } from 'react';\nimport { Props } from '../utils/Props';\n\ntype CardProps = Props<{\n  header?: ReactNode;\n  footer?: ReactNode;\n}>;\n\nexport function Card({ className, children, header, footer }: CardProps) {\n  return (\n    <div className={className}>\n      {header}\n      {children}\n      {footer}\n    </div>\n  );\n}\n\ntype HeaderProps = Props;\n\nfunction Header({ children, className }: HeaderProps) {\n  return <div className={className}>{children}</div>;\n}\n\nCard.Header = Header;\n\ntype FooterProps = Props;\n\nfunction Footer({ children, className }: FooterProps) {\n  return <div className={className}>{children}</div>;\n}\n\nCard.Footer = Footer;\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React, { ElementType } from 'react';\nimport { FormattedDate, FormattedMessage, FormattedTime } from 'react-intl';\nimport { Props } from '../utils/Props';\nimport { Card } from './Card';\n\nconst StyledCardHeader = styled(Card.Header)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 3rem;\n  font-size: 1.2rem;\n`;\n\nconst StyledMetaInformation = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  align-items: flex-end;\n`;\n\nconst StyledTagContainer = styled.div`\n  a {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst StyledCardFooter = styled(Card.Footer)`\n  display: flex;\n  align-items: center;\n  height: 3rem;\n`;\n\nconst StyledHeading = styled.h3`\n  margin: 0;\n`;\n\ntype ExcerptItemProps = Props<{\n  title: string;\n  date: string;\n  path: string;\n  tags?: { translation: string; path: string }[];\n  headingType?: ElementType;\n}>;\n\nexport function ExcerptItem({ className, title, date, tags, children, path, headingType = 'h3' }: ExcerptItemProps) {\n  const header = (\n    <StyledCardHeader>\n      <Link to={path}>\n        <StyledHeading as={headingType}>{title}</StyledHeading>\n      </Link>\n      <StyledMetaInformation>\n        <span>\n          <FormattedDate value={date} /> <FormattedTime value={date} />\n        </span>\n        {tags && (\n          <StyledTagContainer>\n            {tags.map((tag, i) => (\n              <Link to={tag.path} key={i}>\n                {tag.translation}\n              </Link>\n            ))}\n          </StyledTagContainer>\n        )}\n      </StyledMetaInformation>\n    </StyledCardHeader>\n  );\n  const footer = (\n    <StyledCardFooter>\n      <Link to={path}>\n        <FormattedMessage id={'misc.more'} />\n      </Link>\n    </StyledCardFooter>\n  );\n\n  return (\n    <Card header={header} footer={footer} className={className}>\n      {children}\n    </Card>\n  );\n}\n"],"sourceRoot":""}