{"version":3,"sources":["webpack:///./src/components/Card.tsx","webpack:///./src/components/ExcerptItem.tsx","webpack:///./src/components/Hint.tsx","webpack:///./src/templates/blog.tsx"],"names":["Card","className","children","header","footer","Header","Footer","StyledCardHeader","StyledMetaInformation","StyledTagContainer","StyledCardFooter","StyledHeading","ExcerptItem","title","date","tags","path","headingType","to","as","value","map","tag","i","key","translation","id","StyledHint","Hint","StyledExcerptItem","NoPostsHint","Blog","data","pageContext","useIntl","formatMessage","posts","edges","PaddedElement","length","post","node","frontmatter","fields","modifiedAt","excerpt"],"mappings":"yMAQO,SAASA,EAAT,GAAkE,IAAlDC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAClD,OACE,mBAAKH,UAAWA,GACbE,EACAD,EACAE,GAWPJ,EAAKK,OAJL,YAAsD,IAApCH,EAAoC,EAApCA,SAAUD,EAA0B,EAA1BA,UAC1B,OAAO,mBAAKA,UAAWA,GAAYC,IAWrCF,EAAKM,OAJL,YAAsD,IAApCJ,EAAoC,EAApCA,SAAUD,EAA0B,EAA1BA,UAC1B,OAAO,mBAAKA,UAAWA,GAAYC,ICtBrC,IAAMK,EAAmB,YAAOP,EAAKK,OAAZ,8CAAH,sHAQhBG,EAAwB,mBAAH,iDAAG,CAAH,mGAOrBC,EAAqB,mBAAH,8CAAG,CAAH,kDAMlBC,EAAmB,YAAOV,EAAKM,OAAZ,8CAAH,sEAMhBK,EAAgB,kBAAH,yCAAG,CAAH,mCAYZ,SAASC,EAAT,GAA6G,IAAtFX,EAAsF,EAAtFA,UAAWY,EAA2E,EAA3EA,MAAOC,EAAoE,EAApEA,KAAMC,EAA8D,EAA9DA,KAAMb,EAAwD,EAAxDA,SAAUc,EAA8C,EAA9CA,KAA8C,IAAxCC,mBAAwC,MAA1B,KAA0B,EAC5Gd,EACJ,YAACI,EAAD,KACE,YAAC,OAAD,CAAMW,GAAIF,GACR,YAACL,EAAD,CAAeQ,GAAIF,GAAcJ,IAEnC,YAACL,EAAD,KACE,wBACE,YAAC,IAAD,CAAeY,MAAON,IADxB,IACiC,YAAC,IAAD,CAAeM,MAAON,KAEtDC,GACC,YAACN,EAAD,KACGM,EAAKM,KAAI,SAACC,EAAKC,GAAN,OACR,YAAC,OAAD,CAAML,GAAII,EAAIN,KAAMQ,IAAKD,GACtBD,EAAIG,mBAQbrB,EACJ,YAACM,EAAD,KACE,YAAC,OAAD,CAAMQ,GAAIF,GACR,YAAC,IAAD,CAAkBU,GAAI,gBAK5B,OACE,YAAC1B,EAAD,CAAMG,OAAQA,EAAQC,OAAQA,EAAQH,UAAWA,GAC9CC,K,6JC1EP,IAAMyB,EAAa,mBAAH,sCAAG,CAAH,sCAMT,SAASC,EAAT,GAAkD,IAAlC1B,EAAkC,EAAlCA,SAAUD,EAAwB,EAAxBA,UAC/B,OAAO,YAAC0B,EAAD,CAAY1B,UAAWA,GAAYC,G,4BCD5C,IAAM2B,EAAoB,YAAOjB,IAAP,gDAAH,8CAIjBkB,EAAc,YAAOF,EAAP,4CAIL,SAASG,EAAT,GAAgD,IAAhCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,YAE7BpB,EADOqB,cACMC,cAAc,CAAET,GAAI,oBACjCU,EAAQJ,EAAKI,MAAMC,MAEzB,OACE,YAAC,IAAD,CAAeJ,YAAaA,EAAapB,MAAOA,GAC9C,YAACyB,EAAA,EAAD,KACE,sBACE,YAAC,IAAD,CAAkBZ,GAAI,qBAEN,IAAjBU,EAAMG,OACL,YAACT,EAAD,KACE,YAAC,IAAD,CAAkBJ,GAAG,oBAGvBU,EAAMf,KAAI,SAACmB,EAAMjB,GAAP,OACR,YAACM,EAAD,CACEhB,MAAO2B,EAAKC,KAAKC,YAAY7B,MAC7BG,KAAMwB,EAAKC,KAAKE,OAAO3B,KACvBQ,IAAKD,EACLT,KAAM0B,EAAKC,KAAKE,OAAOC,WACvB7B,KAAMyB,EAAKC,KAAKE,OAAO5B,MAEtByB,EAAKC,KAAKI","file":"component---src-templates-blog-tsx-59fcc4ec75a8a15ef2e6.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport { Props } from '../utils/Props';\n\ntype CardProps = Props<{\n  header?: ReactNode;\n  footer?: ReactNode;\n}>;\n\nexport function Card({ className, children, header, footer }: CardProps) {\n  return (\n    <div className={className}>\n      {header}\n      {children}\n      {footer}\n    </div>\n  );\n}\n\ntype HeaderProps = Props;\n\nfunction Header({ children, className }: HeaderProps) {\n  return <div className={className}>{children}</div>;\n}\n\nCard.Header = Header;\n\ntype FooterProps = Props;\n\nfunction Footer({ children, className }: FooterProps) {\n  return <div className={className}>{children}</div>;\n}\n\nCard.Footer = Footer;\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React, { ElementType } from 'react';\nimport { FormattedDate, FormattedMessage, FormattedTime } from 'react-intl';\nimport { Props } from '../utils/Props';\nimport { Card } from './Card';\n\nconst StyledCardHeader = styled(Card.Header)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 3rem;\n  font-size: 1.2rem;\n`;\n\nconst StyledMetaInformation = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  align-items: flex-end;\n`;\n\nconst StyledTagContainer = styled.div`\n  a {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst StyledCardFooter = styled(Card.Footer)`\n  display: flex;\n  align-items: center;\n  height: 3rem;\n`;\n\nconst StyledHeading = styled.h3`\n  margin: 0;\n`;\n\ntype ExcerptItemProps = Props<{\n  title: string;\n  date: string;\n  path: string;\n  tags?: { translation: string; path: string }[];\n  headingType?: ElementType;\n}>;\n\nexport function ExcerptItem({ className, title, date, tags, children, path, headingType = 'h3' }: ExcerptItemProps) {\n  const header = (\n    <StyledCardHeader>\n      <Link to={path}>\n        <StyledHeading as={headingType}>{title}</StyledHeading>\n      </Link>\n      <StyledMetaInformation>\n        <span>\n          <FormattedDate value={date} /> <FormattedTime value={date} />\n        </span>\n        {tags && (\n          <StyledTagContainer>\n            {tags.map((tag, i) => (\n              <Link to={tag.path} key={i}>\n                {tag.translation}\n              </Link>\n            ))}\n          </StyledTagContainer>\n        )}\n      </StyledMetaInformation>\n    </StyledCardHeader>\n  );\n  const footer = (\n    <StyledCardFooter>\n      <Link to={path}>\n        <FormattedMessage id={'misc.more'} />\n      </Link>\n    </StyledCardFooter>\n  );\n\n  return (\n    <Card header={header} footer={footer} className={className}>\n      {children}\n    </Card>\n  );\n}\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport { Props } from '../utils/Props';\n\nconst StyledHint = styled.div`\n  width: 100%;\n`;\n\ntype HintProps = Props;\n\nexport function Hint({ children, className }: HintProps) {\n  return <StyledHint className={className}>{children}</StyledHint>;\n}\n","import styled from '@emotion/styled';\nimport { graphql } from 'gatsby';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BlogPageQuery, SitePageContext } from '../../graphql-types';\nimport { ExcerptItem } from '../components/ExcerptItem';\nimport { Hint } from '../components/Hint';\nimport { DefaultLayout } from '../layouts/default';\nimport { PaddedElement } from '../layouts/default/PaddedElement';\n\nconst StyledExcerptItem = styled(ExcerptItem)`\n  margin-bottom: 2rem;\n`;\n\nconst NoPostsHint = styled(Hint)``;\n\ntype BlogProps = { data: BlogPageQuery; pageContext: SitePageContext };\n\nexport default function Blog({ data, pageContext }: BlogProps) {\n  const intl = useIntl();\n  const title = intl.formatMessage({ id: 'page.blog.title' });\n  const posts = data.posts.edges;\n\n  return (\n    <DefaultLayout pageContext={pageContext} title={title}>\n      <PaddedElement>\n        <h2>\n          <FormattedMessage id={'page.blog.title'} />\n        </h2>\n        {posts.length === 0 ? (\n          <NoPostsHint>\n            <FormattedMessage id=\"misc.noEntries\" />\n          </NoPostsHint>\n        ) : (\n          posts.map((post, i) => (\n            <StyledExcerptItem\n              title={post.node.frontmatter.title}\n              path={post.node.fields.path}\n              key={i}\n              date={post.node.fields.modifiedAt}\n              tags={post.node.fields.tags}\n            >\n              {post.node.excerpt}\n            </StyledExcerptItem>\n          ))\n        )}\n      </PaddedElement>\n    </DefaultLayout>\n  );\n}\n\nexport const query = graphql`\n  query BlogPage($language: String!, $skip: Int!, $limit: Int!) {\n    posts: allMarkdownRemark(\n      sort: { fields: fields___modifiedAt, order: DESC }\n      limit: $limit\n      skip: $skip\n      filter: { fields: { language: { eq: $language }, kind: { eq: \"blog\" } } }\n    ) {\n      edges {\n        node {\n          fields {\n            path\n            modifiedAt\n            tags {\n              translation\n              path\n            }\n          }\n          frontmatter {\n            title\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}