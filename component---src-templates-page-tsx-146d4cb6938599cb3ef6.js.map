{"version":3,"sources":["webpack:///./src/templates/page.tsx","webpack:///./src/styles/variables.ts","webpack:///./src/components/Header.tsx","webpack:///./src/styles/global.ts","webpack:///./src/components/LayoutRoot.tsx","webpack:///./src/components/Main.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/layouts/index.tsx","webpack:///./src/components/Page.tsx","webpack:///./src/components/Container.tsx"],"names":["PageTemplate","_ref","data","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_layouts__WEBPACK_IMPORTED_MODULE_4__","_components_Page__WEBPACK_IMPORTED_MODULE_2__","_components_Container__WEBPACK_IMPORTED_MODULE_3__","markdownRemark","frontmatter","title","dangerouslySetInnerHTML","__html","html","query","dimensions","regular","large","gutter","pageWidth","headerHeight","footerHeight","colors","StyledHeader","styled_base_browser_esm","target","HomepageLink","Link","name","styles","StyledDivider","Header","core_browser_esm","react","to","viewBox","points","globalStyles","css_browser_esm","LayoutRoot","children","StyledMain","Main","className","StyledFooter","Footer","Footer_StyledDivider","Date","toISOString","IndexLayout","gatsby_browser_entry","render","components_LayoutRoot","Helmet_default","a","site","siteMetadata","meta","content","description","keywords","components_Header","components_Main","components_Footer","_3113665618","StyledPage","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__","Page","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","StyledContainer","Container"],"mappings":"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","file":"component---src-templates-page-tsx-146d4cb6938599cb3ef6.js","sourcesContent":["import * as React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Page from '../components/Page'\nimport Container from '../components/Container'\nimport IndexLayout from '../layouts'\n\ninterface PageTemplateProps {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        author: {\n          name: string\n          url: string\n        }\n      }\n    }\n    markdownRemark: {\n      html: string\n      excerpt: string\n      frontmatter: {\n        title: string\n      }\n    }\n  }\n}\n\nconst PageTemplate: React.FC<PageTemplateProps> = ({ data }) => (\n  <IndexLayout>\n    <Page>\n      <Container>\n        <h1>{data.markdownRemark.frontmatter.title}</h1>\n        {/* eslint-disable-next-line react/no-danger */}\n        <div dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }} />\n      </Container>\n    </Page>\n  </IndexLayout>\n)\n\nexport default PageTemplate\n\nexport const query = graphql`\n  query PageTemplateQuery($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n        author {\n          name\n          url\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      excerpt\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n","/* eslint-disable max-len */\n\nexport const dimensions = {\n  baseSize: {\n    regular: '16px',\n    large: '18px'\n  },\n  layout: {\n    gutter: '1.5rem',\n    pageWidth: '80rem',\n    headerHeight: '8rem',\n    footerHeight: '5rem'\n  }\n}\n\nexport const colors = {\n  dark: '#6A4A3C',\n  red: '#CC333F',\n  orange: '#EB6841',\n  yellow: '#EDC951',\n  contra: '#00A0B0',\n}\n\nexport const fonts = {\n  sansSerif: \"'Roboto', 'Verdana', 'Ubuntu', sans-serif\"\n}\n","import * as React from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { dimensions, colors } from '../styles/variables'\n\nconst StyledHeader = styled.header`\n  position: relative;\n  height: ${dimensions.layout.headerHeight};\n  background-color: ${colors.dark};\n`\n\nconst HomepageLink = styled(Link)`\n  color: white;\n  font-size: 1.5rem;\n  font-weight: 600;\n\n  &:hover,\n  &:focus {\n    text-decoration: none;\n  }\n`\n\nconst StyledDivider = styled.svg`\n  width: 100%;\n\n  polygon {\n    fill: ${colors.dark};\n  }\n`\n\ninterface HeaderProps {\n  title: string\n}\n\nconst Header: React.FC<HeaderProps> = ({ title }) => (\n  <>\n    <StyledHeader>\n      <HomepageLink to=\"/\">{title}</HomepageLink>\n    </StyledHeader>\n    <StyledDivider viewBox=\"0 0 100 2\">\n      <polygon points=\"0 0, 100 0, 100 2, 20 0, 0 2\"></polygon>\n    </StyledDivider>\n  </>\n)\n\nexport default Header\n","import css from '@emotion/css';\nimport { dimensions, fonts } from './variables'\n\nexport const globalStyles = css`\n  html {\n    height: 100%;\n    font-size: ${dimensions.baseSize.regular};\n    font-family: ${fonts.sansSerif};\n  }\n\n  body {\n    display: flex;\n    min-height: 100%;\n    flex-direction: column;\n  }\n\n  #___gatsby,\n  #___gatsby > * {\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n  }\n\n  header,\n  main,\n  footer {\n    padding: ${dimensions.layout.gutter} calc((100vw - ${dimensions.layout.pageWidth}) / 2);\n  }\n`\n","import * as React from 'react'\nimport { Global } from '@emotion/core'\nimport { globalStyles } from '../styles/global'\n\ninterface LayoutRootProps {\n  className?: string\n}\n\nconst LayoutRoot: React.FC<LayoutRootProps> = ({ children }) => (\n  <>\n    <Global styles={globalStyles} />\n    {children}\n  </>\n)\n\nexport default LayoutRoot\n","import * as React from 'react'\nimport styled from '@emotion/styled'\n\nconst StyledMain = styled.main`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`\n\ninterface MainProps {\n  className?: string\n}\n\nconst Main: React.FC<MainProps> = ({ children, className }) => <StyledMain className={className}>{children}</StyledMain>\n\nexport default Main\n","import * as React from 'react'\nimport styled from '@emotion/styled'\nimport { dimensions, colors } from '../styles/variables'\n\nconst StyledFooter = styled.footer`\n  position: relative;\n  height: ${dimensions.layout.footerHeight};\n  background-color: ${colors.dark};\n`\n\nconst StyledDivider = styled.svg`\n  width: 100%;\n\n  polygon {\n    fill: ${colors.dark};\n  }\n`\n\ninterface FooterProps {\n  className?: string\n}\n\nconst Footer: React.FC<FooterProps> = ({ className }) => (\n  <>\n    <StyledDivider viewBox=\"0 0 100 2\">\n      <polygon points=\"0 0, 80 2, 100 0, 100 2, 0 100\"></polygon>\n    </StyledDivider>\n    <StyledFooter className={className}>{new Date().toISOString()}</StyledFooter>\n  </>\n)\n\nexport default Footer\n","import * as React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport 'modern-normalize'\n\nimport Header from '../components/Header'\nimport LayoutRoot from '../components/LayoutRoot'\nimport Main from '../components/Main'\nimport Footer from '../components/Footer'\n\ninterface StaticQueryProps {\n  site: {\n    siteMetadata: {\n      title: string\n      description: string\n      keywords: string\n    }\n  }\n}\n\nconst IndexLayout: React.FC = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query IndexLayoutQuery {\n        site {\n          siteMetadata {\n            title\n            description\n            keywords\n          }\n        }\n      }\n    `}\n    render={(data: StaticQueryProps) => (\n      <LayoutRoot>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: data.site.siteMetadata.description },\n            { name: 'keywords', content: data.site.siteMetadata.keywords }\n          ]}\n        />\n        <Header title={data.site.siteMetadata.title} />\n        <Main>{children}</Main>\n        <Footer />\n      </LayoutRoot>\n    )}\n  />\n)\n\nexport default IndexLayout\n","import * as React from 'react'\nimport styled from '@emotion/styled'\n\nconst StyledPage = styled.div`\n  display: block;\n  flex: 1;\n  position: relative;\n  margin-bottom: 3rem;\n`\n\ninterface PageProps {\n  className?: string\n}\n\nconst Page: React.FC<PageProps> = ({ children, className }) => <StyledPage className={className}>{children}</StyledPage>\n\nexport default Page\n","import * as React from 'react'\nimport styled from '@emotion/styled'\n\nconst StyledContainer = styled.div`\n  position: relative;\n  margin-left: auto;\n  margin-right: auto;\n  width: auto;\n`\n\ninterface ContainerProps {\n  className?: string\n}\n\nconst Container: React.FC<ContainerProps> = ({ children, className }) => <StyledContainer className={className}>{children}</StyledContainer>\n\nexport default Container\n"],"sourceRoot":""}